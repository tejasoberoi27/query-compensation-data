// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"bytes"
	"fmt"
	"io"
	"strconv"
)

// A record representing individual compensation data.
type Compensation struct {
	ID                 string   `json:"id"`
	Timestamp          string   `json:"timestamp"`
	Company            *string  `json:"company,omitempty"`
	Title              *string  `json:"title,omitempty"`
	City               *string  `json:"city,omitempty"`
	State              *string  `json:"state,omitempty"`
	TotalComp          *float64 `json:"total_comp,omitempty"`
	SigningBonus       *float64 `json:"signing_bonus,omitempty"`
	BaseSalary         *float64 `json:"base_salary,omitempty"`
	AnnualBonus        *float64 `json:"annual_bonus,omitempty"`
	AnnualStockValue   *float64 `json:"annual_stock_value,omitempty"`
	YearsExp           *float64 `json:"years_exp,omitempty"`
	AdditionalComments *string  `json:"additional_comments,omitempty"`
	Gender             *Gender  `json:"gender,omitempty"`
	YearsAtCompany     *float64 `json:"years_at_company,omitempty"`
}

type CompensationError struct {
	Message string `json:"message"`
}

type CompensationResult struct {
	Compensation *Compensation      `json:"compensation,omitempty"`
	Error        *CompensationError `json:"error,omitempty"`
}

type CompensationsResult struct {
	Compensations []*Compensation    `json:"compensations"`
	Count         int                `json:"count"`
	Error         *CompensationError `json:"error,omitempty"`
}

type Query struct {
}

// Enum to control sorting behavior in compensation list queries.
type CompensationSort string

const (
	CompensationSortTimestampAsc  CompensationSort = "TIMESTAMP_ASC"
	CompensationSortTimestampDesc CompensationSort = "TIMESTAMP_DESC"
	CompensationSortTotalcompAsc  CompensationSort = "TOTALCOMP_ASC"
	CompensationSortTotalcompDesc CompensationSort = "TOTALCOMP_DESC"
)

var AllCompensationSort = []CompensationSort{
	CompensationSortTimestampAsc,
	CompensationSortTimestampDesc,
	CompensationSortTotalcompAsc,
	CompensationSortTotalcompDesc,
}

func (e CompensationSort) IsValid() bool {
	switch e {
	case CompensationSortTimestampAsc, CompensationSortTimestampDesc, CompensationSortTotalcompAsc, CompensationSortTotalcompDesc:
		return true
	}
	return false
}

func (e CompensationSort) String() string {
	return string(e)
}

func (e *CompensationSort) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = CompensationSort(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid CompensationSort", str)
	}
	return nil
}

func (e CompensationSort) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *CompensationSort) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e CompensationSort) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}

type Gender string

const (
	GenderMale   Gender = "MALE"
	GenderFemale Gender = "FEMALE"
)

var AllGender = []Gender{
	GenderMale,
	GenderFemale,
}

func (e Gender) IsValid() bool {
	switch e {
	case GenderMale, GenderFemale:
		return true
	}
	return false
}

func (e Gender) String() string {
	return string(e)
}

func (e *Gender) UnmarshalGQL(v any) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Gender(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Gender", str)
	}
	return nil
}

func (e Gender) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

func (e *Gender) UnmarshalJSON(b []byte) error {
	s, err := strconv.Unquote(string(b))
	if err != nil {
		return err
	}
	return e.UnmarshalGQL(s)
}

func (e Gender) MarshalJSON() ([]byte, error) {
	var buf bytes.Buffer
	e.MarshalGQL(&buf)
	return buf.Bytes(), nil
}
